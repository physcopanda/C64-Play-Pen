; Disable this to make the IRQ take more time for sanity checking of the longest executiuon path
; with respect to the tape timings.
TapeLoaderEarlyOut = 1

; This tape loader uses an IRQ and CIA timer to leave the mainline for other use
!zn
.byte							= $02
.checksum						= $03
TapeLoaderInitialiseIRQ
	; Turn off CIA IRQ sources
	lda #$7f
	sta CIA1InterruptControl
	sta CIA2InterruptControl

	lda #<.irq
	sta KERNALIRQServiceRoutineLo
	lda #>.irq
	sta KERNALIRQServiceRoutineHi

	; Setup NMI
	lda #<.nmi
	sta KERNALNMIServiceRoutineLo
	lda #>.nmi
	sta KERNALNMIServiceRoutineHi

	; Enable interrupts to be generated on positive edge on FLAG pin from datasette
	lda #%10010000
	sta CIA1InterruptControl

	; Setup CIA1 TimerA
	; We set the timer to be exactly half way between the bit 0 (2 lots of TapeTurboSpeed) value and bit 1 (4 lots of TapeTurboSpeed*3) value, which just happens to be TapeTurboSpeed*3
	lda #<(TapeTurboSpeed*3)
	sta CIA1TimerALo
	lda #>(TapeTurboSpeed*3)
	sta CIA1TimerAHi

	; Ack any interrupts that have happened from CIA1 only. We don't ack anything on CIA2 because we want to keep restore disabled.
	lda CIA1InterruptControl

	jsr .ResetLoaderStatus

	rts

.ResetLoaderStatus
	lda #0
	sta .byte					; Safe to set 0 zero here since we will be getting a sync byte which resets to 1 for the carry 8 bit check later on
	sta TurboTapeHeaderStatus
	sta TurboTapeFinishedLoadingFile
	sta .checksum
	rts

; Approx cycles while running (varies) including IRQ setup/return 160
; Since we are timing a shortest time period of (2 * TapeTurboSpeed) for a zero bit this
; execution time is not a huge issue.
; ** Note we do not bother to save Y on the stack since it isn't used
.irq
	pha
	txa
	pha

	; ACK IRQ
	lda CIA1InterruptControl
	ldx #%11001
	stx CIA1TimerAControl		; Start timer again, one shot mode.
	lsr							; Get TimerA finished flag into carry
	; Shift actual tape bit 0/1 into received byte
	rol .byte					; If we are synced then this will cause carry to be set every eight bits. Else carry is undefined.

	; Produces some sound during loading
;	lda SIDVolumeFilter
;	eor #15
;	sta SIDVolumeFilter

	lda VIC2BorderColour
	eor #5						; Better border colours with one less byte than using the clc/adc method
	sta VIC2BorderColour

	; Produces some different sound during loading
;	sta SIDVolumeFilter


	lda .byte
	ldx TurboTapeHeaderStatus
	bne .gotSync				; We have sync so proceed to process bits as normal
	cmp #TapeSyncCode			; We are not synced so check for our sync byte to come in
	beq .processByte			; We have a valid sync code so we try to process the byte which then causes us to become synced
	; Just rti until we reach a good synced state
	; *** Deliberate fall through to .end
.end		; Also called from other other places so it must just do a rti now
	pla
	tax
	pla
.nmi
	rti

	; We got the sync so we know we can dec the bit count and process the byte when we get 8 bits
.gotSync
	bcc .end					; We've not got the carry set yet so we can't have a full byte

	; Produces more different sound during loading
;	sta SIDVolumeFilter

.processByte
	ldx #1						; Reset the byte to 1 so we will get carry set when we rotate into it and get 8 bits
	stx .byte
	; Parse header byte reading state
	ldx TurboTapeHeaderStatus
	; Implied cpx #0 
	beq .doingSyncByte
!ifdef TapeLoaderEarlyOut {
	cpx #8
	beq .stateStoreByte
}
	dex		; Test 1
	beq .doingHeaderCheckEx
	dex		; Test 2
	beq .doingHeaderCheckEx2
	dex		; Test 3
	beq .doingFileNameCheck
	dex		; Test 4
	beq .doingStartLoByte
	dex		; Test 5
	beq .doingStartHiByte
	dex		; Test 6
	beq .doingEndLoByte
	dex		; Test 7
	beq .doingEndHiByte
	dex		; Test 9...
	bne .doingChecksumByte	; ...  by doing a reverse check
	; Fall through here means we are in state 8, the most commonly used state for data bytes.
	; x = 0
.stateStoreByte
!ifdef TapeLoaderEarlyOut {
	ldx #0
}
	sta (TapeLoaderStoringToLo,x)
	; Then calculate the checksum
	eor .checksum
	sta .checksum
	inc TapeLoaderStoringToLo
	bne .over1
	inc VIC2BorderColour
	inc TapeLoaderStoringToHi
.over1
	; Check for reaching the end of what we are loading
	lda TapeLoaderStoringToHi
	cmp ZPStartArrayVariableHi
	bne .end
	lda TapeLoaderStoringToLo
	cmp ZPStartArrayVariableLo
	bne .end
	; *** Deliberate fall through to doingSyncByte so we then process headerStatus 8 which is the checksum
.doingSyncByte	; This is also called by the other header stage routines
	inc TurboTapeHeaderStatus			; We are now synced because header status has changed from being 0
	jmp .end

.doingHeaderCheckEx
	cmp #TapeHeaderByteEx
	beq .doingSyncByte			; Succeeded in reading the correct header byte ex
	; *** Deliberate fall through to below
.notValidSoReset
	; We failed so reset and try syncing again
	lda #0
	sta TurboTapeHeaderStatus
	sta .byte					; Safe to set 0 zero here since we will be getting a sync byte which resets to 1 for the carry 8 bit check later on
	jmp .end
.doingHeaderCheckEx2
	cmp #TapeHeaderByteEx2
	beq .doingSyncByte			; Succeeded in reading the correct header byte ex
	jmp .notValidSoReset
.doingFileNameCheck
FileNameByte = * + 1
	cmp #0	; Self modifying byte for the filename
	beq .doingSyncByte
	; If the filename isn't correct then tweak the border colour once
	inc VIC2BorderColour
	jmp .notValidSoReset
.doingStartLoByte
	sta TapeLoaderStoringToLo
	jmp .doingSyncByte
.doingStartHiByte
	sta TapeLoaderStoringToHi
	jmp .doingSyncByte
.doingEndLoByte
	sta ZPStartArrayVariableLo
	jmp .doingSyncByte
.doingEndHiByte
	sta ZPStartArrayVariableHi
	jmp .doingSyncByte
.doingChecksumByte
	cmp .checksum
	bne .displayLoadError	; Indicate a load error by making the border do a colour effect.
	
	; Reset the loader status so the IRQ then goes ahead and tries to load whatever is next
	jsr .ResetLoaderStatus
	; Signal our user mode that we have done a file
	inc TurboTapeFinishedLoadingFile
	jmp .end

.displayLoadError
	inc VIC2BorderColour
	jmp .displayLoadError
