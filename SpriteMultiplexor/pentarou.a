; Pentarou variables
; known states - must all be defined in state_machine in the jump table
;state_pentarou_wave
;state_pentarou_dead
;state_pentarou_walk
;state_pentarou_jump
;state_pentarou_falling

pentarou_locky = 234
pentarou_startx = 178

pentarou_x
  !by pentarou_startx
pentarou_Y
  !by pentarou_locky

pentarou_wave
  ; save x
  txa
  pha
  ldx #0
  ldy #1
  
  ; hide unnecessary virtual sprites
  lda #$ff
  sta Multiplex_YPos + 7
  sta Multiplex_YPos + 8
  sta Multiplex_YPos + 5
  
  ;sta Multiplex_YPos + 4
  
  ; set shadow and common parts
  +MSetSprite 1, pentarou_startx+12, pentarou_locky-32, $df ;black tr
  +MSetSprite 3, pentarou_startx+12, pentarou_locky-12, $e4 ;black br
  +MSetSprite 6, pentarou_startx, pentarou_locky-32, $f5 ;yellow beak
  +MSetSprite 9, pentarou_startx, pentarou_locky-32, $f6 ;red beak
  +MSetSprite 10, pentarou_startx, pentarou_locky-19, $ff ;blue shadow
  
  ;+MSetSprite 4, pentarou_startx, pentarou_locky-32, $ee ;white body t
  
  ; which frame to display
  lda state_time_L+state_entity_pentarou
  lsr
  lsr
  lsr
  lsr
  lsr
  bcs .wave2
  jsr ._wave1
  jmp .wave_over
.wave2
  jsr ._wave2
.wave_over
  ; restore x
  pla
  tax
  
  ; look for next state - after 3 seconds switch to walk
  lda state_time_L+state_entity_pentarou
  !if PAL = 1 {
      cmp #150
  } else {
      cmp #180
  }
  bcc +
  ; change state now
  lda #state_pentarou_walk
  jsr new_state
+
  rts
  
._wave1
  +MSetSprite 0, pentarou_startx-12, pentarou_locky-32, $de ; black tl
  +MSetSprite 2, pentarou_startx-12, pentarou_locky-12, $e3 ; black bl
  
  ;+MSetSprite 5, pentarou_startx, pentarou_locky-12, $ef ; white bottom
  rts
  
._wave2
  +MSetSprite 0, pentarou_startx-12, pentarou_locky-32, $e0 ; black tl
  +MSetSprite 2, pentarou_startx-12, pentarou_locky-12, $e5 ; black bl
  
  ;+MSetSprite 5, pentarou_startx, pentarou_locky-12, $f0 ; white bottom
  rts

pentarou_dead
  rts

 
pentarou_walk
  ; save x
  txa
  pha
  ldx #0
  ldy #1
  ; hide unnecessary virtual sprites
  lda #$ff
  sta Multiplex_YPos + 6
  sta Multiplex_YPos + 7
  sta Multiplex_YPos + 8
  sta Multiplex_YPos + 9
  
  ;sta Multiplex_YPos + 4
  ;sta Multiplex_YPos + 5
  
  +MSetSprite 10, pentarou_startx, pentarou_locky-19, $ff ;blue shadow
  ; which frame to display
  lda state_time_L+state_entity_pentarou
  lsr
  lsr
  lsr
  lsr
  bcc .walk_mid
  lsr
  bcs .walk_right
  jsr ._walk_left
  jmp .walk_over
.walk_mid
  jsr ._walk_mid
  jmp .walk_over
.walk_right
  jsr ._walk_right
  jmp .walk_over
.walk_over
  ; restore x
  pla
  tax
  ; look for next state - after 3 seconds switch to wave
  lda state_time_L+state_entity_pentarou
  !if PAL = 1 {
      cmp #150
  } else {
      cmp #180
  }
  bcc +
  ; change state now
  lda #state_pentarou_wave
  jsr new_state
+
  rts

._walk_mid
  +MSetSprite 0, pentarou_startx-12, pentarou_locky-35, $c0 ;black tl
  +MSetSprite 1, pentarou_startx+12, pentarou_locky-35, $c1 ;black tr
  +MSetSprite 2, pentarou_startx-12, pentarou_locky-14, $c8 ;black bl
  +MSetSprite 3, pentarou_startx+12, pentarou_locky-14, $c9 ;black br
  
  ;+MSetSprite 4, pentarou_startx-12, pentarou_locky-33, $e8 ;white
  lda #$ff
  sta Multiplex_YPos + 5
  rts
  
._walk_left
  +MSetSprite 0, pentarou_startx-12, pentarou_locky-35, $d2 ;black tl
  +MSetSprite 1, pentarou_startx+12, pentarou_locky-35, $c5 ;black tr
  +MSetSprite 2, pentarou_startx-12, pentarou_locky-14, $da ;black bl
  +MSetSprite 3, pentarou_startx+12, pentarou_locky-14, $e6 ;black br
  
  ;+MSetSprite 4, pentarou_startx-12, pentarou_locky-35, $ea ;white
  ;+MSetSprite 5, pentarou_startx+19, pentarou_locky-2, $ec ;white
  rts
  
._walk_right
  +MSetSprite 0, pentarou_startx-12, pentarou_locky-35, $c6 ;black tl
  +MSetSprite 1, pentarou_startx+12, pentarou_locky-35, $d5 ;black tr
  +MSetSprite 2, pentarou_startx-12, pentarou_locky-14, $e7 ;black bl
  +MSetSprite 3, pentarou_startx+12, pentarou_locky-14, $dd ;black br
  
  ;+MSetSprite 4, pentarou_startx-12, pentarou_locky-35, $eb ;white
  ;+MSetSprite 5, pentarou_startx+4, pentarou_locky-2, $ec ;white
  rts
  
pentarou_jump
  rts

pentarou_falling
  rts
 