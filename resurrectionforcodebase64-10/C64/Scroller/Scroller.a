;Multi-directional scrolling routines

frameWantScrX			!by 0
frameWantScrY			!by 0
frameTotalScrScroll		!by 0
frameScrollMoveColours	!by 0
frameScrollPreCalcX		!by 0
frameScrollPreCalcY		!by 0
frameScrollPreCalcXVel	!by 0	; The velocity used for this movement
frameScrollPreCalcYVel	!by 0	; The velocity used for this movement
frameScrollX			!by 0	; Pixels
frameScrollY			!by 0	; Pixels
frameScrollOldX			!by 0	; Pixels
frameScrollOldY			!by 0	; Pixels

scrollMapHX	!by $00		; Block pos in map
scrollMapLX	!by $00		; Char pos in block (0-3)
scrollMapHY	!by $00		; Block pos in map
scrollMapLY	!by $00		; Char pos in block (0-3)

!zn {
ScrollerInitTables
	; Sort out the map table based on map width
	ldx #0
	lda #<(MapData+2)
	sta tempWork0
	lda #>(MapData+2)
	sta tempWork1
.fma1
	lda tempWork0
	sta MapTabL,x
	lda tempWork1
	sta MapTabH,x
	lda tempWork0
	clc
	adc MapData
	sta tempWork0
	bcc .over2
	inc tempWork1
.over2
	inx
	bne .fma1
	rts
}

scrollerRealMovementXPixels !by 0
scrollerRealMovementYPixels !by 0

!zn {
; To be called as one of the first functions in the frame. Can be called even if the screen is being displayed.
ScrollerCalculate
	lda frameScrollX
	sta frameScrollOldX
	lda frameScrollY
	sta frameScrollOldY
	; Now do the scroll with what velocity we want
	; Reset the internal scroll registers
	lda frameScrollMoveColours
	beq .normalScroll
	; Use whatever values were calculated the previous frame
	lda frameScrollPreCalcX
	sta frameScrollX
	lda frameScrollPreCalcY
	sta frameScrollY
	lda frameScrollPreCalcXVel
	sta scrollerRealMovementXPixels
	lda frameScrollPreCalcYVel
	sta scrollerRealMovementYPixels
	rts

.normalScroll
	; Reset the moved velocity here. If it is a colour scroll then we naturally use whatever was cached.
	lda #0
	sta scrollerRealMovementXPixels
	sta scrollerRealMovementYPixels
	sta frameScrollPreCalcXVel
	sta frameScrollPreCalcYVel

	; Do map range check before fine scrolling
	lda scrollMapHX
	ora scrollMapLX
	bne .no1
	lda frameTargetVelX
	bmi .no1
	lda #0
	sta frameTargetVelX
.no1
	lda scrollMapHY
	ora scrollMapLY
	bne .no2
	lda frameTargetVelY
	bmi .no2
	lda #0
	sta frameTargetVelY
.no2

	lda MapData	; Width
	sec
	sbc #10
	cmp scrollMapHX
	bne .no3
	lda scrollMapLX
	cmp #3
	bne .no3
	lda frameTargetVelX
	bpl .no3
	lda #0
	sta frameTargetVelX
.no3
	lda MapData+1	; Height
	sec
	sbc #6
	cmp scrollMapHY
	bne .no4
	lda scrollMapLY
	cmp #3
	bne .no4
	lda frameTargetVelY
	bpl .no4
	lda #0
	sta frameTargetVelY
.no4




	ldx #0
	ldy #0
	lda frameTargetVelX
	sta scrollerRealMovementXPixels
	sta frameScrollPreCalcXVel
	lda frameScrollX
	clc
	adc frameTargetVelX
	sta frameScrollX
	; Check next frame (colour) to see if this previous frame needs a char scroll
	clc
	adc frameTargetVelX
	bpl .nxs1
	ldx #-1
	bne .nxs2
.nxs1
	cmp #8
	bcc .nxs2
	ldx #1
.nxs2
	and #7
	sta frameScrollPreCalcX

	lda frameTargetVelY
	sta scrollerRealMovementYPixels
	sta frameScrollPreCalcYVel
	lda frameScrollY
	clc
	adc frameTargetVelY
	sta frameScrollY
	; Check next frame (colour) to see if this previous frame needs a char scroll
	clc
	adc frameTargetVelY
	bpl .nys1
	ldy #-40
	bne .nys2
.nys1
	cmp #8
	bcc .nys2
	ldy #40
.nys2
	and #7
	sta frameScrollPreCalcY

	stx frameWantScrX
	sty frameWantScrY

	; Is there a char screen scroll due?
	lda frameWantScrX
	clc
	adc frameWantScrY
	sta frameTotalScrScroll
	bne .goingToScroll
	rts

.goingToScroll
	; Going to scroll so clamp the fine scrolling values just to make sure.
	; This doesn't always trigger a clamp but sometimes a sharp change in direction or a weird wrap will cause a clamp.
	lda frameScrollX
	bpl .ip1
	; Moving neg X so calculate
	lda #0
	sec
	sbc frameScrollOldX
	sta scrollerRealMovementXPixels
	lda #8
	sec
	sbc frameScrollPreCalcX
	sta frameScrollPreCalcXVel
	lda #0
	sec
	sbc frameScrollPreCalcXVel
	sta frameScrollPreCalcXVel
	lda #0
	beq .ip2
.ip1
	cmp #8
	bcc .ip2
	; Moving pos X so calculate
	lda #7
	sec
	sbc frameScrollOldX
	sta scrollerRealMovementXPixels
	ldx frameScrollPreCalcX
	inx
	stx frameScrollPreCalcXVel
	lda #7
.ip2
	sta frameScrollX

	lda frameScrollY
	bpl .ip3
	; Moving neg Y so calculate
	lda #0
	sec
	sbc frameScrollOldY
	sta scrollerRealMovementYPixels
	lda #8
	sec
	sbc frameScrollPreCalcY
	sta frameScrollPreCalcYVel
	lda #0
	sec
	sbc frameScrollPreCalcYVel
	sta frameScrollPreCalcYVel
	lda #0
	beq .ip4
.ip3
	cmp #8
	bcc .ip4
	; Moving pos Y so calculate
	lda #7
	sec
	sbc frameScrollOldY
	sta scrollerRealMovementYPixels
	ldx frameScrollPreCalcY
	inx
	stx frameScrollPreCalcYVel
	lda #7
.ip4
	sta frameScrollY

	; Now update the inernal block counters
	lda frameWantScrX
	bmi .doPosX
	bne .doNegX
.xRet
	lda frameWantScrY
	bmi .doPosY
	bne .doNegY
.yRet
	rts

.doNegX
	dec scrollMapLX
	bpl .xRet
	dec scrollMapHX
	jmp .clampLoX
.doPosX
	inc scrollMapLX
	lda scrollMapLX
	cmp #4
	bne .xRet
	inc scrollMapHX
	; Fall through
.clampLoX
	lda scrollMapLX
	and #3
	sta scrollMapLX
	jmp .xRet

.doNegY
	dec scrollMapLY
	bpl .yRet
	dec scrollMapHY
	jmp .clampLoY
.doPosY
	inc scrollMapLY
	lda scrollMapLY
	cmp #4
	bne .yRet
	inc scrollMapHY
	; Fall through
.clampLoY
	lda scrollMapLY
	and #3
	sta scrollMapLY
	jmp .yRet
}

!zn {
; To be called after ScrollerCalculate. Can be called even if the screen is being displayed.
ScrollerScreen
	; Test to see if we might do a colour scroll this frame and if so then update the displaying screen bank for the IRQ since our colour update is likely to be running by the time the IRQ happens.
	lda frameScrollMoveColours
	beq .scrollScreen

JNotWantingScroll
	jmp NotWantingScroll

.scrollScreen

	lda frameTotalScrScroll
	beq JNotWantingScroll

	inc frameScrollMoveColours

	cmp #1
	bne .scrTestNext1
	ldy topScreenBank
	bne .wantScr1To0_1
	jmp ScrollBank0To1_1
.wantScr1To0_1
	jmp ScrollBank1To0_1
.scrTestNext1

	cmp #-1
	bne .scrTestNext2
	ldy topScreenBank
	bne .wantScr1To0_m1
	jmp ScrollBank0To1_m1
.wantScr1To0_m1
	jmp ScrollBank1To0_m1
.scrTestNext2

	cmp #40
	bne .scrTestNext3
	ldy topScreenBank
	bne .wantScr1To0_40
	jmp ScrollBank0To1_40
.wantScr1To0_40
	jmp ScrollBank1To0_40
.scrTestNext3

	cmp #-40
	bne .scrTestNext4
	ldy topScreenBank
	bne .wantScr1To0_m40
	jmp ScrollBank0To1_m40
.wantScr1To0_m40
	jmp ScrollBank1To0_m40
.scrTestNext4

	cmp #39
	bne .scrTestNext5
	ldy topScreenBank
	bne .wantScr1To0_39
	jmp ScrollBank0To1_39
.wantScr1To0_39
	jmp ScrollBank1To0_39
.scrTestNext5

	cmp #-39
	bne .scrTestNext6
	ldy topScreenBank
	bne .wantScr1To0_m39
	jmp ScrollBank0To1_m39
.wantScr1To0_m39
	jmp ScrollBank1To0_m39
.scrTestNext6

	cmp #41
	bne .scrTestNext7
	ldy topScreenBank
	bne .wantScr1To0_41
	jmp ScrollBank0To1_41
.wantScr1To0_41
	jmp ScrollBank1To0_41
.scrTestNext7

	cmp #-41
	bne .scrTestNext8
	ldy topScreenBank
	bne .wantScr1To0_m41
	jmp ScrollBank0To1_m41
.wantScr1To0_m41
	jmp ScrollBank1To0_m41
.scrTestNext8


NotWantingScroll
!ifdef Scroller_DebugScreenScrollTimings {
	lda #VIC2Colour_Black
	sta VIC2BorderColour
}
	rts
}

!zn {
; Must be called after ScrollerScreen. Must not be called while the scrolling screen is being displayed.
ScrollerOffScreen
	; Now update the colour memory if required by the scroll
	lda frameScrollMoveColours
	cmp #2	; Signifies we just did a character scroll
	bcc NotWantingColourScroll

	; Do this first since the colour scroll can take some time
	lda topScreenBank
	eor #1
	sta topScreenBank
	beq .m1
	lda #$cf
	bne .m2
.m1
	lda #$cb
.m2
	jsr Multiplex_SetSpritePointer

	; Find the correct scroll routine to call
	lda frameTotalScrScroll

	; Reset what char screen scroll we did
	ldx #0
	stx frameTotalScrScroll
	stx frameScrollMoveColours

	cmp #1
	bne .colTestNext1
	jmp ScrollColour_1
.colTestNext1

	cmp #-1
	bne .colTestNext2
	jmp ScrollColour_m1
.colTestNext2

	cmp #40
	bne .colTestNext3
	jmp ScrollColour_40
.colTestNext3

	cmp #-40
	bne .colTestNext4
	jmp ScrollColour_m40
.colTestNext4

	cmp #39
	bne .colTestNext5
	jmp ScrollColour_39
.colTestNext5

	cmp #-39
	bne .colTestNext6
	jmp ScrollColour_m39
.colTestNext6

	cmp #41
	bne .colTestNext7
	jmp ScrollColour_41
.colTestNext7

	cmp #-41
	bne .colTestNext8
	jmp ScrollColour_m41
.colTestNext8

NotWantingColourScroll
!ifdef Scroller_DebugColourScrollTimings {
	lda #VIC2Colour_Black
	sta VIC2BorderColour
}
	lda frameScrollMoveColours
	beq .s1
	cmp #1
	bne .s1
	inc frameScrollMoveColours
.s1
	rts
}


!zn
MapTabL
!fill 256
MapTabH
!fill 256

!zn
DrawBlock
	sta mainAStore
	stx mainXStore
	sty mainYStore
	tya
	asl
	asl
	tay
	lda ScreenTabL,y
	sta tempWork0
	clc
	txa
	asl
	asl
	adc tempWork0
	sta tempWork0
	lda ScreenTabH,y
	adc #$c8
	sta tempWork1

	ldx mainAStore
	lda BlockTabL,x
	sta tempWork2
	lda BlockTabH,x
	sta tempWork3
	ldy #0

	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda tempWork0
	clc
	adc #36
	sta tempWork0
	bcc .over3
	inc tempWork1
.over3

	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda tempWork0
	clc
	adc #36
	sta tempWork0
	bcc .over4
	inc tempWork1
.over4

	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda tempWork0
	clc
	adc #36
	sta tempWork0
	bcc .over5
	inc tempWork1
.over5

	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y

	lda mainAStore
	ldx mainXStore
	ldy mainYStore
	rts

!ifdef Scroller_FullScreen {
!zn
DrawBlockLine
	sta mainAStore
	stx mainXStore
	sty mainYStore
	tya
	asl
	asl
	tay
	lda ScreenTabL,y
	sta tempWork0
	clc
	txa
	asl
	asl
	adc tempWork0
	sta tempWork0
	lda ScreenTabH,y
	adc #$c8
	sta tempWork1

	ldx mainAStore
	lda BlockTabL,x
	sta tempWork2
	lda BlockTabH,x
	sta tempWork3
	ldy #0

	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y
	iny
	lda (tempWork2),y
	sta (tempWork0),y

	lda mainAStore
	ldx mainXStore
	ldy mainYStore
	rts
}

!zn
DrawBlockColour
	sta mainAStore
	stx mainXStore
	sty mainYStore
	tya
	asl
	asl
	tay
	lda ScreenTabL,y
	sta tempWork0
	clc
	txa
	asl
	asl
	adc tempWork0
	sta tempWork0
	lda ScreenTabH,y
	adc #>COLOURRAM
	sta tempWork1

	ldx mainAStore
	lda BlockColours,x
	tax
	ldy #0

	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	tya
	clc
	adc #37
	tay
	txa

	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	tya
	clc
	adc #37
	tay
	txa

	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	tya
	clc
	adc #37
	tay
	txa

	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y

	lda mainAStore
	ldx mainXStore
	ldy mainYStore
	rts

!ifdef Scroller_FullScreen {
!zn
DrawBlockColourLine
	sta mainAStore
	stx mainXStore
	sty mainYStore
	tya
	asl
	asl
	tay
	lda ScreenTabL,y
	sta tempWork0
	clc
	txa
	asl
	asl
	adc tempWork0
	sta tempWork0
	lda ScreenTabH,y
	adc #>COLOURRAM
	sta tempWork1

	ldx mainAStore
	lda BlockColours,x
	tax
	ldy #0

	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y
	iny
	sta (tempWork0),y

	lda mainAStore
	ldx mainXStore
	ldy mainYStore
	rts
}

!zn
GetMapBlock
	stx mainXStore
	sty mainYStore
	tya
	clc
	adc scrollMapHY
	tay
	lda MapTabL,y
	sta .sm1+1
	lda MapTabH,y
	sta .sm1+2
	txa
	clc
	adc scrollMapHX
	tax
.sm1	lda $ffff,x
	ldx mainXStore
	ldy mainYStore
	rts

!zn
; Draws the initial map from the coords setup
DrawMap
	ldy #0
.l1
	ldx #0
.l2
	jsr GetMapBlock
	jsr DrawBlock
	jsr DrawBlockColour
	inx
	cpx #10
	bne .l2
	iny
	ldx #0
!ifdef Scroller_FullScreen {
	cpy #6
} else {
	cpy #5
}
	bne .l1

!ifdef Scroller_FullScreen {
	ldx #0
.l3
	jsr GetMapBlock
	jsr DrawBlockLine
	jsr DrawBlockColourLine
	inx
	cpx #10
	bne .l3
}

!ifdef IRQOpenBorders {
	jsr ScrollerOpenBorderCopyBank0
}

	lda #0
	; MPi: TODO: Maybe draw the map to the back buffer then swap it rather than assuming one
	; static screen bank?
	sta topScreenBank
	rts


!source "Scrollers.a"
!source "ScrollerStrips.a"
