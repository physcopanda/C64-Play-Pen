; Pentarou variables
; known states - must all be defined in state_machine in the jump table
;state_pentarou_wave
;state_pentarou_dead
;state_pentarou_walk
;state_pentarou_jump
;state_pentarou_falling

pentarou_locky = 234
pentarou_startx = 174

pentarou_x
  !by pentarou_startx
pentarou_Y
  !by pentarou_locky

pentarou_wave
  ; save x
  txa
  pha
  ldx #0
  ldy #1
  
  ; set shadow and common parts
  +MSetSprite 1, pentarou_startx+12, pentarou_locky-32, sprites_ptr+31 ;black tr
  +MSetSprite 3, pentarou_startx+12, pentarou_locky-12, sprites_ptr+36 ;black br
  +MSetSprite 4, pentarou_startx, pentarou_locky-32, sprites_ptr+43 ;yellow beak
  +MSetSprite 5, pentarou_startx, pentarou_locky-32, sprites_ptr+44 ;red beak
  +MSetSprite 6, pentarou_startx, pentarou_locky-17,  sprites_ptr+45;blue shadow
  
  ; which frame to display
  lda state_time_L+state_entity_pentarou
  lsr
  lsr
  lsr
  lsr
  lsr
  bcs +
  jsr ._wave1
  jmp .wave_over
+
  jsr ._wave2
.wave_over
  ; restore x
  pla
  tax
  
  ; look for next state - after 3 seconds switch to walk
  lda state_time_L+state_entity_pentarou
  !if PAL = 1 {
      cmp #150
  } else {
      cmp #180
  }
  bcc +
  ; change state now
  lda #state_pentarou_walk
  jsr new_state
+
  rts
  
._wave1
  +MSetSprite 0, pentarou_startx-12, pentarou_locky-32, sprites_ptr+30 ; black tl
  +MSetSprite 2, pentarou_startx-12, pentarou_locky-12, sprites_ptr+35 ; black bl
  rts
  
._wave2
  +MSetSprite 0, pentarou_startx-12, pentarou_locky-32, sprites_ptr+32 ; black tl
  +MSetSprite 2, pentarou_startx-12, pentarou_locky-12, sprites_ptr+37 ; black bl
  rts

pentarou_dead
  rts

 
pentarou_walk
  ; save x
  txa
  pha
  ldx #0
  ldy #1
  
  ;hack in some ground sprites
  +MSetSprite 7, 44+43, 89+83, sprites_ptr+83
  +MSetSprite 8, 61+196, 89+83, sprites_ptr+84
  
  ; hide unnecessary virtual sprites
  lda #$ff
  sta Multiplex_YPos + 4
  sta Multiplex_YPos + 5
  ; set shadow and common parts
  +MSetSprite 6, pentarou_startx, pentarou_locky-17, sprites_ptr+45 ;blue shadow
  
  ; which frame to display
  lda state_time_L+state_entity_pentarou
  lsr
  lsr
  lsr
  lsr
  bcs +
  lsr
  bcs ++
  jsr ._walk_left
  jmp .walk_over
+
  jsr ._walk_mid
  jmp .walk_over
++
  jsr ._walk_right
.walk_over
  ; restore x
  pla
  tax
  ; look for next state - after 3 seconds switch to wave
  lda state_time_L+state_entity_pentarou
  !if PAL = 1 {
      cmp #150
  } else {
      cmp #180
  }
  bcc +
  ; change state now
  lda #state_pentarou_wave
  jsr new_state
+
  rts

._walk_mid
  +MSetSprite 0, pentarou_startx-12, pentarou_locky-35, sprites_ptr ;black tl
  +MSetSprite 1, pentarou_startx+12, pentarou_locky-35, sprites_ptr+1 ;black tr
  +MSetSprite 2, pentarou_startx-12, pentarou_locky-14, sprites_ptr+8 ;black bl
  +MSetSprite 3, pentarou_startx+12, pentarou_locky-14, sprites_ptr+9 ;black br
  rts
  
._walk_left
  +MSetSprite 0, pentarou_startx-12, pentarou_locky-35, sprites_ptr+18 ;black tl
  +MSetSprite 1, pentarou_startx+12, pentarou_locky-35, sprites_ptr+5 ;black tr
  +MSetSprite 2, pentarou_startx-12, pentarou_locky-14, sprites_ptr+26 ;black bl
  +MSetSprite 3, pentarou_startx+12, pentarou_locky-14, sprites_ptr+38 ;black br
  rts
  
._walk_right
  +MSetSprite 0, pentarou_startx-12, pentarou_locky-35, sprites_ptr+6 ;black tl
  +MSetSprite 1, pentarou_startx+12, pentarou_locky-35, sprites_ptr+21 ;black tr
  +MSetSprite 2, pentarou_startx-12, pentarou_locky-14, sprites_ptr+39 ;black bl
  +MSetSprite 3, pentarou_startx+12, pentarou_locky-14, sprites_ptr+29 ;black br
  rts
  
pentarou_jump
  rts

pentarou_falling
  rts
 